{"version":3,"file":"static/js/4726.4a67b05a.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/shared/UserProfileFormFields.tsx","keycloak-theme/login/pages/RegisterUserProfile.tsx","../node_modules/keycloakify/src/tools/emailRegExp.ts","../node_modules/keycloakify/src/login/lib/useFormValidation.tsx","../node_modules/keycloakify/src/tools/Array.prototype.every.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\r\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\r\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\r\nimport type { I18n } from \"../../i18n\";\r\n\r\nexport type UserProfileFormFieldsProps = {\r\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\r\n    i18n: I18n;\r\n    getClassName: (classKey: ClassKey) => string;\r\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\r\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\r\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\r\n};\r\n\r\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\r\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\r\n\r\n    const { advancedMsg, msg } = i18n;\r\n\r\n    const {\r\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\r\n        formValidationDispatch,\r\n        attributesWithPassword\r\n    } = useFormValidation({\r\n        kcContext,\r\n        i18n\r\n    });\r\n\r\n    useEffect(() => {\r\n        onIsFormSubmittableValueChange(isFormSubmittable);\r\n    }, [isFormSubmittable]);\r\n\r\n    let currentGroup = \"\";\r\n\r\n    return (\r\n        <>\r\n            {attributesWithPassword.map((attribute, i) => {\r\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\r\n\r\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\r\n\r\n                const formGroupClassName = clsx(\r\n                    getClassName(\"kcFormGroupClass\"),\r\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\r\n                );\r\n\r\n                return (\r\n                    <Fragment key={i}>\r\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\r\n                            <div className={formGroupClassName}>\r\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\r\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\r\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\r\n                                    </label>\r\n                                </div>\r\n                                {groupDisplayDescription !== \"\" && (\r\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\r\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\r\n                                            {advancedMsg(groupDisplayDescription)}\r\n                                        </label>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n\r\n                        {BeforeField && <BeforeField attribute={attribute} />}\r\n\r\n                        <div className={formGroupClassName}>\r\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\r\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\r\n                                    {advancedMsg(attribute.displayName ?? \"\")}\r\n                                </label>\r\n                                {attribute.required && <>*</>}\r\n                            </div>\r\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\r\n                                {(() => {\r\n                                    const { options } = attribute.validators;\r\n\r\n                                    if (options !== undefined) {\r\n                                        return (\r\n                                            <select\r\n                                                id={attribute.name}\r\n                                                name={attribute.name}\r\n                                                onChange={event =>\r\n                                                    formValidationDispatch({\r\n                                                        \"action\": \"update value\",\r\n                                                        \"name\": attribute.name,\r\n                                                        \"newValue\": event.target.value\r\n                                                    })\r\n                                                }\r\n                                                onBlur={() =>\r\n                                                    formValidationDispatch({\r\n                                                        \"action\": \"focus lost\",\r\n                                                        \"name\": attribute.name\r\n                                                    })\r\n                                                }\r\n                                                value={value}\r\n                                            >\r\n                                                <>\r\n                                                    <option value=\"\" selected disabled hidden>\r\n                                                        {msg(\"selectAnOption\")}\r\n                                                    </option>\r\n                                                    {options.options.map(option => (\r\n                                                        <option key={option} value={option}>\r\n                                                            {option}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </>\r\n                                            </select>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <input\r\n                                            type={(() => {\r\n                                                switch (attribute.name) {\r\n                                                    case \"password-confirm\":\r\n                                                    case \"password\":\r\n                                                        return \"password\";\r\n                                                    default:\r\n                                                        return \"text\";\r\n                                                }\r\n                                            })()}\r\n                                            id={attribute.name}\r\n                                            name={attribute.name}\r\n                                            value={value}\r\n                                            onChange={event =>\r\n                                                formValidationDispatch({\r\n                                                    \"action\": \"update value\",\r\n                                                    \"name\": attribute.name,\r\n                                                    \"newValue\": event.target.value\r\n                                                })\r\n                                            }\r\n                                            onBlur={() =>\r\n                                                formValidationDispatch({\r\n                                                    \"action\": \"focus lost\",\r\n                                                    \"name\": attribute.name\r\n                                                })\r\n                                            }\r\n                                            className={getClassName(\"kcInputClass\")}\r\n                                            aria-invalid={displayableErrors.length !== 0}\r\n                                            disabled={attribute.readOnly}\r\n                                            autoComplete={attribute.autocomplete}\r\n                                        />\r\n                                    );\r\n                                })()}\r\n                                {displayableErrors.length !== 0 &&\r\n                                    (() => {\r\n                                        const divId = `input-error-${attribute.name}`;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\r\n                                                <span\r\n                                                    id={divId}\r\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\r\n                                                    style={{\r\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\r\n                                                    }}\r\n                                                    aria-live=\"polite\"\r\n                                                >\r\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\r\n                                                </span>\r\n                                            </>\r\n                                        );\r\n                                    })()}\r\n                            </div>\r\n                        </div>\r\n                        {AfterField && <AfterField attribute={attribute} />}\r\n                    </Fragment>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n}","// ejected using 'npx eject-keycloak-page'\r\nimport { useState } from \"react\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\r\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\r\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\r\nimport type { KcContext } from \"../kcContext\";\r\nimport type { I18n } from \"../i18n\";\r\n\r\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\r\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\r\n\r\n    const { getClassName } = useGetClassName({\r\n        doUseDefaultCss,\r\n        classes\r\n    });\r\n\r\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\r\n\r\n    const { msg, msgStr } = i18n;\r\n\r\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\r\n\r\n    return (\r\n        <Template\r\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\r\n            displayMessage={messagesPerField.exists(\"global\")}\r\n            displayRequiredFields={true}\r\n            headerNode={msg(\"registerTitle\")}\r\n        >\r\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\r\n                <UserProfileFormFields\r\n                    kcContext={kcContext}\r\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\r\n                    i18n={i18n}\r\n                    getClassName={getClassName}\r\n                />\r\n                {recaptchaRequired && (\r\n                    <div className=\"form-group\">\r\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\r\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\r\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\r\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\r\n                            <span>\r\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\r\n                        <input\r\n                            className={clsx(\r\n                                getClassName(\"kcButtonClass\"),\r\n                                getClassName(\"kcButtonPrimaryClass\"),\r\n                                getClassName(\"kcButtonBlockClass\"),\r\n                                getClassName(\"kcButtonLargeClass\")\r\n                            )}\r\n                            type=\"submit\"\r\n                            value={msgStr(\"doRegister\")}\r\n                            disabled={!isFormSubmittable}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </Template>\r\n    );\r\n}\r\n","export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import \"keycloakify/tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport type { MessageKey } from \"keycloakify/login/i18n/i18n\";\nimport type { Attribute, Validators } from \"keycloakify/login/kcContext/KcContext\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport { emailRegexp } from \"keycloakify/tools/emailRegExp\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18n;\n}) {\n    const { kcContext, passwordValidators = {}, i18n } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKey}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18n;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if ((defaultValue ?? \"\") !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKey>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKey>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n","if (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn: any, thisArg: any) {\n        \"use strict\";\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0.\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T) testResult = callbackfn.call(T, kValue, k, O);\n                else testResult = callbackfn(kValue, k, O);\n\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","_useFormValidation","useFormValidation","_useFormValidation$fo","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","_jsx","_Fragment","children","map","attribute","i","_attribute$displayNam","_attribute$group","group","_attribute$groupDispl","groupDisplayHeader","_attribute$groupDispl2","groupDisplayDescription","_fieldStateByAttribut","name","value","displayableErrors","formGroupClassName","clsx","length","_jsxs","Fragment","className","id","concat","htmlFor","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","disabled","hidden","option","type","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msgStr","_useState","useState","_useState2","_slicedToArray","setIsFormSubmittable","displayMessage","exists","displayRequiredFields","headerNode","action","registrationAction","method","href","loginUrl","emailRegexp","params","_params$passwordValid","passwordValidators","useMemo","passwordRequired","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","_toConsumableArray","_useGetErrors","advancedMsgStr","getErrors","useConstCallback","fieldValueByAttributeName","_attributes$find","find","defaultValue","block","doesErrorExist","existsError","_b","errorMessageStr","get","errors","validatorName","validator","_validator$ignoreEmp","ignoreEmptyValue","max","min","parseInt","msgArgs","push","apply","_validator$ignoreEmp2","otherName","shouldBe","errorMessageKey","otherValue","msgArg","_validator2$ignoreEm","pattern","RegExp","test","_a","reverse","_validator3$ignoreEm","_validator4$ignoreEm","intValue","isNaN","indexOf","useGetErrors","initialInternalState","Object","fromEntries","_ref2","_useReducer","useReducer","state","assign","_defineProperty","newValue","_useReducer2","formValidationInternalState","entries","_ref3","_ref4","_ref4$","doDisplayPotentialErrorMessages","every","_ref5","_ref6","_ref6$","Array","prototype","callbackfn","thisArg","T","k","this","TypeError","O","len","toString","call","arguments","kValue","obj","key","defineProperty","enumerable","configurable","writable","_toPropertyKey","arg","input","hint","prim","Symbol","toPrimitive","res","String","Number"],"sourceRoot":""}