{"version":3,"file":"static/js/5738.ba990ea7.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/Login.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js"],"sourcesContent":["import { useState, type FormEventHandler } from \"react\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\r\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\r\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\r\nimport type { KcContext } from \"../kcContext\";\r\nimport type { I18n } from \"../i18n\";\r\n\r\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\r\n\r\nif (my_custom_param !== null) {\r\n    console.log(\"my_custom_param:\", my_custom_param);\r\n}\r\n\r\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\r\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\r\n\r\n    const { getClassName } = useGetClassName({\r\n        doUseDefaultCss,\r\n        classes\r\n    });\r\n\r\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } = kcContext;\r\n\r\n    const { msg, msgStr } = i18n;\r\n\r\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\r\n\r\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\r\n        e.preventDefault();\r\n\r\n        setIsLoginButtonDisabled(true);\r\n\r\n        const formElement = e.target as HTMLFormElement;\r\n\r\n        //NOTE: Even if we login with email Keycloak expect username and password in\r\n        //the POST request.\r\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\r\n\r\n        formElement.submit();\r\n    });\r\n\r\n    return (\r\n        <Template\r\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\r\n            displayInfo={\r\n                realm.password &&\r\n                realm.registrationAllowed &&\r\n                !registrationDisabled\r\n            }\r\n            displayWide={realm.password && social.providers !== undefined}\r\n            headerNode={<div style={{ fontWeight: 700, fontSize: '30px'}}>Welcome back!</div>}\r\n            // headerNode={msg(\"doLogIn\")}\r\n            infoNode={\r\n                <div id=\"kc-registration\">\r\n                    <span>\r\n                        {msg(\"noAccount\")}\r\n                        <a tabIndex={6} href={url.registrationUrl}>\r\n                            {msg(\"doRegister\")}\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n            }\r\n        >\r\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\r\n                <div\r\n                    id=\"kc-form-wrapper\"\r\n                    className={clsx(\r\n                        realm.password &&\r\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\r\n                    )}\r\n                >\r\n                    {realm.password && (\r\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\r\n                            <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                {!usernameHidden &&\r\n                                    (() => {\r\n                                        const label = !realm.loginWithEmailAllowed\r\n                                            ? \"username\"\r\n                                            : realm.registrationEmailAsUsername\r\n                                                ? \"email\"\r\n                                                : \"usernameOrEmail\";\r\n\r\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\r\n                                                    {msg(label)}\r\n                                                </label>\r\n                                                <input\r\n                                                    tabIndex={1}\r\n                                                    id={autoCompleteHelper}\r\n                                                    className={getClassName(\"kcInputClass\")}\r\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\r\n                                                    //the browser how to pre fill the form but before submit we put it back\r\n                                                    //to username because it is what keycloak expects.\r\n                                                    name={autoCompleteHelper}\r\n                                                    defaultValue={login.username ?? \"\"}\r\n                                                    type=\"text\"\r\n                                                    autoFocus={true}\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </>\r\n                                        );\r\n                                    })()}\r\n                            </div>\r\n                            <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\r\n                                    {msg(\"password\")}\r\n                                </label>\r\n                                <input\r\n                                    tabIndex={2}\r\n                                    id=\"password\"\r\n                                    className={getClassName(\"kcInputClass\")}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </div>\r\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\r\n                                <div id=\"kc-form-options\">\r\n                                    {realm.rememberMe && !usernameHidden && (\r\n                                        <div className=\"checkbox\">\r\n                                            <label>\r\n                                                <input\r\n                                                    tabIndex={3}\r\n                                                    id=\"rememberMe\"\r\n                                                    name=\"rememberMe\"\r\n                                                    type=\"checkbox\"\r\n                                                    {...(login.rememberMe === \"on\"\r\n                                                        ? {\r\n                                                            \"checked\": true\r\n                                                        }\r\n                                                        : {})}\r\n                                                />\r\n                                                {msg(\"rememberMe\")}\r\n                                            </label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\r\n                                    {realm.resetPasswordAllowed && (\r\n                                        <span>\r\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\r\n                                                {msg(\"doForgotPassword\")}\r\n                                            </a>\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    id=\"id-hidden-input\"\r\n                                    name=\"credentialId\"\r\n                                    {...(auth?.selectedCredential !== undefined\r\n                                        ? {\r\n                                            \"value\": auth.selectedCredential\r\n                                        }\r\n                                        : {})}\r\n                                />\r\n                                <input\r\n                                    tabIndex={4}\r\n                                    className={clsx(\r\n                                        getClassName(\"kcButtonClass\"),\r\n                                        getClassName(\"kcButtonPrimaryClass\"),\r\n                                        getClassName(\"kcButtonBlockClass\"),\r\n                                        getClassName(\"kcButtonLargeClass\"),\r\n                                        \"ivorypay-button\"\r\n                                    )}\r\n                                    name=\"login\"\r\n                                    id=\"kc-login\"\r\n                                    type=\"submit\"\r\n                                    value={msgStr(\"doLogIn\")}\r\n                                    disabled={isLoginButtonDisabled}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </div>\r\n                {realm.password && social.providers !== undefined && (\r\n                    <div\r\n                        id=\"kc-social-providers\"\r\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\r\n                    >\r\n                        <ul\r\n                            className={clsx(\r\n                                getClassName(\"kcFormSocialAccountListClass\"),\r\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\r\n                            )}\r\n                        >\r\n                            {social.providers.map(p => (\r\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\r\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\r\n                                        <span>{p.displayName}</span>\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </Template>\r\n    );\r\n}\r\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}"],"names":["my_custom_param","URL","window","location","href","searchParams","get","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","_useState","useState","_useState2","_slicedToArray","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","_jsx","displayInfo","password","registrationAllowed","displayWide","undefined","providers","headerNode","style","fontWeight","fontSize","children","infoNode","id","_jsxs","tabIndex","registrationUrl","className","clsx","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","_Fragment","htmlFor","name","defaultValue","username","type","autoFocus","autoComplete","rememberMe","_objectSpread","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","concat","alias","providerId","displayName","console","log","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","arg","input","hint","prim","Symbol","toPrimitive","res","call","TypeError","String","Number"],"sourceRoot":""}